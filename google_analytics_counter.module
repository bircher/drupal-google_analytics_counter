<?php

/**
 * @file
 * Basic functions for this module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\google_analytics_counter\GoogleAnalyticsCounterCommon;

/**
 * Implements hook_help().
 */
function google_analytics_counter_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.google_analytics_counter':
      $output = file_get_contents(drupal_get_path('module', 'google_analytics_counter') . '/README.txt');;
      return nl2br($output);
  }
}

/**
 * Implements hook_cron().
 */
function google_analytics_counter_cron() {
  $config = \Drupal::config('google_analytics_counter.settings');

  // $interval must be a value in seconds.
  $interval = 60 * $config->get('general_settings.cron_interval');

  // We don't want to act every time cron runs, which could be every minute.
  // To avoid this interval, set Minimum time to wait before fetching Google Analytics data to 0.
  if (\Drupal::time()->getRequestTime() >= \Drupal::state()->get('google_analytics_counter.last_cron_run') + $interval) {
    /* @var \Drupal\google_analytics_counter\GoogleAnalyticsCounterCommon $common */
    $common = Drupal::service('google_analytics_counter.common');
    /* @var \Drupal\google_analytics_counter\GoogleAnalyticsCounterDashboard $dashboard */
    $dashboard = Drupal::service('google_analytics_counter.dashboard');
    $queue = \Drupal::queue('google_analytics_counter_worker');

    try {
      if ($common->isAuthenticated()) {
        // Fetch the first batch to see how many there are.
        $results = $common->getChunkedResults();
        $total = $results->results->totalResults;
        for($index = 0; $index < $total/$config->get('general_settings.chunk_to_fetch'); $index++) {
          // Add a queue item to fetch for all chunks.
          $queue->createItem(['type' => 'fetch', 'index' => $index]);
        }

        // Queue all the published nodes to be counted
        $ids = \Drupal::entityQuery('node')
          ->condition('status', \Drupal\node\NodeInterface::PUBLISHED)
          ->execute();
        foreach ($ids as $nid) {
          $queue->createItem(['type' => 'count', 'nid' => $nid]);
          // Here it is. The queue worker is not working so we are using another process.
          $common->updateStorage($nid);
        }
      }
      else {
        \Drupal::logger('google_analytics_counter')->alert('Google Analytics Counter is not authenticated.');
      }
    }
    catch (RuntimeException $e) {
      \Drupal::logger('google_analytics_counter')->alert('Cron experienced a problem: ' . $e->getMessage());
    }
    \Drupal::state()->set('google_analytics_counter.last_cron_run', \Drupal::time()->getRequestTime());

    // Important to set it before the job because if they take long and there is another cron triggered...
    \Drupal::configFactory()->getEditable('google_analytics_counter.settings')->set('general_settings.cron_next_execution', \Drupal::time()->getRequestTime())->save();

    // Retrieve path with counts from Google Analytics.
    $common->updatePathCounts();

    // Update the storage values on the dashboard.
    $dashboard->updateDashboard();

  }
}

/**
 * Implements hook_theme().
 */
function google_analytics_counter_theme() {
  return [
    'google_analytics_counter' => [
      'variables' => ['pageviews' => NULL],
    ],
  ];
}
