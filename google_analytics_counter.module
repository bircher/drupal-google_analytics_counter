<?php

/**
 * @file
 * Basic functions for this module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\google_analytics_counter\GoogleAnalyticsCounterCommon;

/**
 * Implements hook_help().
 */
function google_analytics_counter_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.google_analytics_counter':
      $output = file_get_contents(drupal_get_path('module', 'google_analytics_counter') . '/README.txt');;
      return nl2br($output);
  }
}

/**
 * Implements hook_cron().
 */
function google_analytics_counter_cron() {
  // Set a watchdog error if there is no Google Analytics profile enabled.
  // It's a weak test but better than none.
  $config = \Drupal::config('google_analytics_counter.settings');
  if ($config->get('profile_id') == '') {
    $url = Url::fromRoute('google_analytics_counter.admin_auth_form');
    $text = Link::fromTextAndUrl(t('authenticate here'), $url);
    \Drupal::logger('Google Analytics Counter')->error(
      t('No Google Analytics profile has been authenticated!
      Google Analytics Counter can not fetch any new data. Please %link .', array(
      '%link' => $text->toString()->getGeneratedLink(),
      ))->render()
    );
    return;
  }

  // Defaults to an hourly interval. Of course, cron has to be running
  // at least hourly for this to work.
  // $interval must contain value in seconds.
  $interval = 60 * $config->get('cron_interval');
  // We don't want to act every time cron runs (which could be every minute)
  // so keep a time for the next run in a variable.
  if (REQUEST_TIME >= \Drupal::state()->get('google_analytics_counter.last_cron_run') + $interval) {
    // Important to set it before the job because if they take long and
    // there is another cron triggered...
    // Retrieve path with counts from Google Analytics into a local table.
    GoogleAnalyticsCounterCommon::updatePathCounts();
    // Now also update the storage table from the local table with the GA data.
    GoogleAnalyticsCounterCommon::updateStorage();
    \Drupal::state()->set('google_analytics_counter.last_cron_run', REQUEST_TIME);
  }

}
